
# environment refers to either of "onPrem" "saas" "marketPlace"
# "saas" "marketPlace" are used by Kinetica only
# for a customer trying to install the chart on his own wherever, it should be onPrem
environment: ""
# onPrem Providers: "k3s" "kind" "eks" "aks" 
# saas Providers: eks
# marketPlace Providers: aks eks
provider: ""

# clusterName and clusterRegion are used only when environment is marketPlace and provider is eks
# clusterName alone is used if you are using dedicated-saas eks, this value is used to create a named StorageClass
# its used in the monitoring related configmaps
clusterName: ""
clusterRegion: ""
letsEncryptEmail: devops@kinetica.com
global:
  defaultStorageClass: ""
kubeRbacProxy:
    image:
      repository: "quay.io/brancz/kube-rbac-proxy"
      tag: "v0.14.2"

kubeStateMetrics:
  install: false
  image:
    repository: "registry.k8s.io/kube-state-metrics/kube-state-metrics"
    tag: "v2.10.1"
otelCollector:
  install: true
  image:
    repository: "otel/opentelemetry-collector-contrib"
    tag: "0.95.0"

fluentBit:
  image:
    repository: "docker.io/fluent/fluent-bit"
    tag: "2.2"


wbOperator:
  install: true
  image:
    repository: "docker.io/kinetica/workbench-operator"
    tag: "v7.2.0-11.ga-2-operator"
    digest: ""
dbOperator:
  install: true
  # optional: aadpodidbinding is required when environment is marketPlace and provider is aks
  aadpodidbinding: ""
  image:
    repository: "docker.io/kinetica/kinetica-k8s-operator"
    tag: "v7.2.0-11.ga-2-operator"
    digest: ""

nodeSelector: {}
tolerations: []
affinity: {}

certManager:
  install: true
"cert-manager":
  installCRDs: 'true'
  namespace: kinetica-system
  nodeSelector: {}
  webhook:
    nodeSelector: {}
  cainjector:
    nodeSelector: {}
  startupapicheck:
    nodeSelector: {}

  
ingressNginx:
  install: true
"ingress-nginx":
  fullnameOverride: "ingress-nginx"
  tcp: {}
  defaultBackend:
    enabled: true
    image:
      repository: docker.io/kineticadevcloud/kinetica-default-backend
      tag: v0.0.1
      digest: ""
    nodeSelector: {}      
    extraEnvs:
      - name: DEBUG
        value: "false"
  controller:
    nodeSelector: {}
    allowSnippetAnnotations: true
    service:
      annotations:
        'service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout': 3600
        'service.beta.kubernetes.io/aws-load-balancer-backend-protocol': tcp
        'service.beta.kubernetes.io/aws-load-balancer-type': nlb
    admissionWebhooks:
      enabled: true
      patch:
        enabled: true  
        image:
          repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
          tag: v1.1.1
          digest: ""

gpuOperator:
  install: false
  "gpu-operator":
    mig:
      strategy: single
    driver:
      enabled: true
    toolkit:
      enabled: true

openldap:
  openldapNamespace: "gpudb"
  fullnameOverride: "openldap"
  global:
    ldapPort: 1389
  image:
    tag: "2.6.7"
  initContainers:
      - name: openldap-create-directory-structure
        image: "docker.io/kinetica/busybox:v7.2.0-11.ga-2"
        command:
          [
            "sh",
            "-c",
            "mkdir -p /bitnami/openldap/data && chown -R 1001:1001 /bitnami",
          ]
        volumeMounts:
        - name: data
          mountPath: /bitnami
  env:
    LDAP_BACKEND: "mdb"
    LDAP_ORGANISATION: "Kinetica DB Inc."
    LDAP_DOMAIN: "kinetica.com"
    LDAP_LOG_LEVEL: "128"
    LDAP_ENABLE_TLS: "no"
  affinity: {}
  podAntiAffinity: {}
  nodeSelector: {}
  persistence:
    enabled: false
    existingClaim: ""
    accessMode: "ReadWriteOnce"
    size: "1Gi"
    storageClass: ""
db:
  create: false
  name: ""
  namespace: gpudb
  debug: false
  autoSuspend:
    enabled: false
  # provide a boolean to say whether its payasyougo or not
  payAsYouGo: false
  # for environment onPrem, provide the following
  deploymentType:
    type: on_prem
    region: on_prem_local
  # awsConfig is applicable only for marketplace on aws
  awsConfig:
    clusterName: ""
    marketplaceApp:
      productCode: ""
      publicKeyVersion: 1
  # azureConfig is applicable only for marketplace on azure
  azureConfig:
    managedApp:
      planId: ""
      resourceUri: ""
    appInsights:
      key: ""
  
  hostManagerMonitor:
    image:
      repository: "docker.io/kinetica/kinetica-k8s-monitor"
      tag: "v7.2.0-11.ga-2"
  # you may use nginx if you want the operator to create the nginx records
  # if you want to manage your own ingress controller/gateway api, provide "none"
  # TODO: As of now, if you want the operator to create nginx records, do the following
  # 1. first install nginx sub chart by providing the release namespace as nginx
  # helm -n nginx install nginx charts/kinetica-operators/charts/ingress-nginx --values values
  # you can refer to the correct ingress-ngix values in the corresponding values file in the operators values files
  # This is needed now as the operator as of now, looks for its nginx in the nginx namespace
  # if you enable ingress-nginx and install the operators, it will install all in the kinetica-system namespace
  ingressController: nginx
  ldap:
    baseDN: dc=kinetica,dc=com
    bindDN: cn=admin,dc=kinetica,dc=com
    host: openldap
    isInLocalK8S: true
    isLDAPS: false
    namespace: gpudb
    port: 1389
  supportingImages:
        busybox:
          image:
            repository: "docker.io/kinetica/busybox"
            tag: "v7.2.0-11.ga-2"
        socat:
          image:
            repository: "docker.io/kinetica/socat"
            tag: "v7.2.0-11.ga-2"
  # stats:
  #   isEnabled: false
  # alertManager:
  #   isEnabled: false
  #   image:      
  #     repository: "docker.io/kinetica/kagent"
  #     tag: "v7.2.0-11.ga-2"
  # grafana:
  #   isEnabled: false
  #   image:      
  #     repository: "docker.io/kinetica/kagent"
  #     tag: "v7.2.0-11.ga-2"
  # loki:
  #   isEnabled: false
  #   image:      
  #     repository: "docker.io/kinetica/kagent"
  #     tag: "v7.2.0-11.ga-2"
  # prometheus:
  #   isEnabled: false
  #   image:      
  #     repository: "docker.io/kinetica/kagent"
  #     tag: "v7.2.0-11.ga-2"
  gadmin:
    isEnabled: true
  reveal:
    isEnabled: true
  gpudbCluster:
    # this applies if you have labelled node pools for compute
    hasPools: false
    clusterSize:
      tshirtSize: XS
      tshirtType: SmallCPU
    ranksPerNode: 1
    replicas: 1
    # provide an fqdn if you want to use a custom fqdn
    fqdn: "local.kinetica"
    letsEncrypt:
      enabled: false
      # only allowed values are staging and production
      environment: "staging"
    # you may either use "payg" or a valid license
    license: ""
    gpuAcceleration: false
    image:
      cuda:
        image:
          repository: "docker.io/kinetica/kinetica-k8s-cuda"
          tag: "v7.2.0-11.ga-2-amd64"
      standard:
        image:
          # you should be able to use docker.io/kinetica/kinetica-k8s-cpu-avx512:v7.2.0-11.ga-2 also
          repository: "docker.io/kinetica/kinetica-k8s-cpu"
          tag:  "v7.2.0-11.ga-2"
    metricsRegistryRepositoryTag:
      image:
        repository: "docker.io/kinetica/fluent-bit"
        tag: "v7.2.0-11.ga-2"
    config:
      postgresProxy:
         enablePostgresProxy: true
      kifs:
        enable: true
        mountPoint: /gpudb/kifs
      procs:
        enable: true
      textSearch:
        enableTextSearch: true
      tieredStorage:
        globalTier:
          colocateDisks: true
        persistTier:
          default:
            limit: ""
            provisioner: ""
            volumeClaim:
              spec:
                storageClassName: ""
        

dbAdminUser:
    create: false
    # allowed pattern "^(?:(?!^graph$|^admin$|^planner$|^[a-zA-Z0-9-]$).){5,10}$"
    name: "kadmin"
    # allowed pattern "^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[!@\\#$%^&*]).{12,}$"
    password: ""
dbWorkbench:
  create: false
  deploymentInfo: '{}'
  fqdn: "local.kinetica"
  letsEncrypt:
    enabled: false
    environment: "staging"

  nodeSelector: {}
    
  image:
    repository: "docker.io/kinetica/workbench"
    tag: "v7.2.0-11.ga-2"
  

  
  
